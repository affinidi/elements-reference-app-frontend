// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Beckn Protocol Core
 * Beckn Core API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
//import * as isomorphicFetch from "isomorphic-fetch";
//import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
// export class BaseAPI {
//     protected configuration: Configuration;

//     constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
//         if (configuration) {
//             this.configuration = configuration;
//             this.basePath = configuration.basePath || this.basePath;
//         }
//     }
// };

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
// export class RequiredError extends Error {
//     name: "RequiredError"
//     constructor(public field: string, msg?: string) {
//         super(msg);
//     }
// }

/**
 * Describes the acknowledgement sent in response to an API call. If the implementation uses HTTP/S, then Ack must be returned in the same session. Every API call to a BPP must be responded to with an Ack whether the BPP intends to respond with a callback or not. This has one property called `status` that indicates the status of the Acknowledgement.
 * @export
 * @interface Ack
 */
export interface Ack {
    /**
     * The status of the acknowledgement. If the request passes the validation criteria of the BPP, then this is set to ACK. If a BPP responds with status = `ACK` to a request, it is required to respond with a callback. If the request fails the validation criteria, then this is set to NACK. Additionally, if a BPP does not intend to respond with a callback even after the request meets the validation criteria, it should set this value to `NACK`.
     * @type {string}
     * @memberof Ack
     */
    status?: Ack.StatusEnum;
    /**
     * A list of tags containing any additional information sent along with the Acknowledgement.
     * @type {Array<TagGroup>}
     * @memberof Ack
     */
    tags?: Array<TagGroup>;
}

/**
 * @export
 * @namespace Ack
 */
export namespace Ack {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        ACK = <any> 'ACK',
        NACK = <any> 'NACK'
    }
}
/**
 * Describes an additional item offered as a value-addition to a product or service. This does not exist independently in a catalog and is always associated with an item.
 * @export
 * @interface AddOn
 */
export interface AddOn {
    /**
     * Provider-defined ID of the add-on
     * @type {string}
     * @memberof AddOn
     */
    id?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof AddOn
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Price}
     * @memberof AddOn
     */
    price?: Price;
}
/**
 * Describes a postal address.
 * @export
 */
export type Address = string
/**
 * Describes the direct performer, driver or executor that fulfills an order. It is usually a person. But in some rare cases, it could be a non-living entity like a drone, or a bot. Some examples of agents are Doctor in the healthcare sector, a driver in the mobility sector, or a delivery person in the logistics sector. This object can be set at any stage of the order lifecycle. This can be set at the discovery stage when the BPP wants to provide details on the agent fulfilling the order, like in healthcare, where the doctor's name appears during search. This object can also used to search for a particular person that the customer wants fulfilling an order. Sometimes, this object gets instantiated after the order is confirmed, like in the case of on-demand taxis, where the driver is assigned after the user confirms the ride.
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * 
     * @type {Person}
     * @memberof Agent
     */
    person?: Person;
    /**
     * 
     * @type {Contact}
     * @memberof Agent
     */
    contact?: Contact;
    /**
     * 
     * @type {Organization}
     * @memberof Agent
     */
    organization?: Organization;
}
/**
 * Describes an authorization mechanism used to start or end the fulfillment of an order. For example, in the mobility sector, the driver may require a one-time password to initiate the ride. In the healthcare sector, a patient may need to provide a password to open a video conference link during a teleconsultation.
 * @export
 * @interface Authorization
 */
export interface Authorization {
    /**
     * Type of authorization mechanism used. The allowed values for this field can be published as part of the network policy.
     * @type {string}
     * @memberof Authorization
     */
    type?: string;
    /**
     * Token used for authorization. This is typically generated at the BPP. The BAP can send this value to the user via any channel that it uses to authenticate the user like SMS, Email, Push notification, or in-app rendering.
     * @type {string}
     * @memberof Authorization
     */
    token?: string;
    /**
     * Timestamp in RFC3339 format from which token is valid
     * @type {Date}
     * @memberof Authorization
     */
    validFrom?: Date;
    /**
     * Timestamp in RFC3339 format until which token is valid
     * @type {Date}
     * @memberof Authorization
     */
    validTo?: Date;
    /**
     * Status of the token
     * @type {string}
     * @memberof Authorization
     */
    status?: string;
}
/**
 * Describes the billing details of an entity.<br>This has properties like name,organization,address,email,phone,time,tax_number, created_at,updated_at
 * @export
 * @interface Billing
 */
export interface Billing {
    /**
     * Name of the billable entity
     * @type {string}
     * @memberof Billing
     */
    name?: string;
    /**
     * Details of the organization being billed.
     * @type {Organization}
     * @memberof Billing
     */
    organization?: Organization;
    /**
     * The address of the billable entity
     * @type {Address}
     * @memberof Billing
     */
    address?: Address;
    /**
     * 
     * @type {string}
     * @memberof Billing
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Billing
     */
    phone?: string;
    /**
     * Details regarding the billing period
     * @type {Time}
     * @memberof Billing
     */
    time?: Time;
    /**
     * ID of the billable entity as recognized by the taxation authority
     * @type {string}
     * @memberof Billing
     */
    taxNumber?: string;
}
/**
 * 
 * @export
 * @interface CancelBody
 */
export interface CancelBody {
    /**
     * 
     * @type {Context & any}
     * @memberof CancelBody
     */
    context: Context & any;
    /**
     * 
     * @type {CancelMessage}
     * @memberof CancelBody
     */
    message: CancelMessage;
}
/**
 * 
 * @export
 * @interface CancelMessage
 */
export interface CancelMessage {
    /**
     * 
     * @type {Orderpropertiesid}
     * @memberof CancelMessage
     */
    orderId: string;
    /**
     * 
     * @type {Optionpropertiesid}
     * @memberof CancelMessage
     */
    cancellationReasonId?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof CancelMessage
     */
    descriptor?: Descriptor;
}
/**
 * Describes a cancellation event
 * @export
 * @interface Cancellation
 */
export interface Cancellation {
    /**
     * Date-time when the order was cancelled by the buyer
     * @type {Date}
     * @memberof Cancellation
     */
    time?: Date;
    /**
     * 
     * @type {string}
     * @memberof Cancellation
     */
    cancelledBy?: Cancellation.CancelledByEnum;
    /**
     * The reason for cancellation
     * @type {Option}
     * @memberof Cancellation
     */
    reason?: Option;
    /**
     * Any additional information regarding the nature of cancellation
     * @type {Descriptor}
     * @memberof Cancellation
     */
    additionalDescription?: Descriptor;
}

/**
 * @export
 * @namespace Cancellation
 */
export namespace Cancellation {
    /**
     * @export
     * @enum {string}
     */
    export enum CancelledByEnum {
        CONSUMER = <any> 'CONSUMER',
        PROVIDER = <any> 'PROVIDER'
    }
}
/**
 * Describes the cancellation terms of an item or an order. This can be referenced at an item or order level. Item-level cancellation terms can override the terms at the order level.
 * @export
 * @interface CancellationTerm
 */
export interface CancellationTerm {
    /**
     * Indicates whether a reason is required to cancel the order
     * @type {boolean}
     * @memberof CancellationTerm
     */
    reasonRequired?: boolean;
    /**
     * Indicates if cancellation will result in a refund
     * @type {boolean}
     * @memberof CancellationTerm
     */
    refundEligible?: boolean;
    /**
     * Indicates if cancellation will result in a return to origin
     * @type {boolean}
     * @memberof CancellationTerm
     */
    returnEligible?: boolean;
    /**
     * The state of fulfillment during which these terms are applicable.
     * @type {State}
     * @memberof CancellationTerm
     */
    fulfillmentState?: State;
    /**
     * 
     * @type {CancellationTermReturnPolicy}
     * @memberof CancellationTerm
     */
    returnPolicy?: CancellationTermReturnPolicy;
    /**
     * 
     * @type {CancellationTermRefundPolicy}
     * @memberof CancellationTerm
     */
    refundPolicy?: CancellationTermRefundPolicy;
    /**
     * Information related to the time of cancellation.
     * @type {Time}
     * @memberof CancellationTerm
     */
    cancelBy?: Time;
    /**
     * 
     * @type {Fee}
     * @memberof CancellationTerm
     */
    cancellationFee?: Fee;
    /**
     * 
     * @type {XInput}
     * @memberof CancellationTerm
     */
    xinputRequired?: XInput;
    /**
     * 
     * @type {XInputResponse}
     * @memberof CancellationTerm
     */
    xinputResponse?: XInputResponse;
    /**
     * 
     * @type {MediaFile}
     * @memberof CancellationTerm
     */
    externalRef?: MediaFile;
}
/**
 * 
 * @export
 * @interface CancellationTermRefundPolicy
 */
export interface CancellationTermRefundPolicy {
    /**
     * Indicates if cancellation will result in a refund
     * @type {boolean}
     * @memberof CancellationTermRefundPolicy
     */
    refundEligible?: boolean;
    /**
     * Time within which refund will be processed after successful cancellation.
     * @type {Time}
     * @memberof CancellationTermRefundPolicy
     */
    refundWithin?: Time;
    /**
     * 
     * @type {Price}
     * @memberof CancellationTermRefundPolicy
     */
    refundAmount?: Price;
}
/**
 * Describes the return policy of an item or an order
 * @export
 * @interface CancellationTermReturnPolicy
 */
export interface CancellationTermReturnPolicy {
    /**
     * Indicates whether the item is eligible for return
     * @type {boolean}
     * @memberof CancellationTermReturnPolicy
     */
    returnEligible?: boolean;
    /**
     * Applicable only for buyer managed returns where the buyer has to return the item to the origin before a certain date-time, failing which they will not be eligible for refund.
     * @type {Time}
     * @memberof CancellationTermReturnPolicy
     */
    returnWithin?: Time;
    /**
     * 
     * @type {Location}
     * @memberof CancellationTermReturnPolicy
     */
    returnLocation?: Location;
    /**
     * 
     * @type {string}
     * @memberof CancellationTermReturnPolicy
     */
    fulfillmentManagedBy?: string;
}
/**
 * Describes the products or services offered by a BPP. This is typically sent as the response to a search intent from a BAP. The payment terms, offers and terms of fulfillment supported by the BPP can also be included here. The BPP can show hierarchical nature of products/services in its catalog using the parent_category_id in categories. The BPP can also send a ttl (time to live) in the context which is the duration for which a BAP can cache the catalog and use the cached catalog.  <br>This has properties like bbp/descriptor,bbp/categories,bbp/fulfillments,bbp/payments,bbp/offers,bbp/providers and exp<br>This is used in the following situations.<br><ul><li>This is typically used in the discovery stage when the BPP sends the details of the products and services it offers as response to a search intent from the BAP. </li></ul>
 * @export
 * @interface Catalog
 */
export interface Catalog {
    /**
     * 
     * @type {Descriptor}
     * @memberof Catalog
     */
    descriptor?: Descriptor;
    /**
     * Fulfillment modes offered at the BPP level. This is used when a BPP itself offers fulfillments on behalf of the providers it has onboarded.
     * @type {Array<Fulfillment>}
     * @memberof Catalog
     */
    fulfillments?: Array<Fulfillment>;
    /**
     * Payment terms offered by the BPP for all transactions. This can be overriden at the provider level.
     * @type {Array<Payment>}
     * @memberof Catalog
     */
    payments?: Array<Payment>;
    /**
     * Offers at the BPP-level. This is common across all providers onboarded by the BPP.
     * @type {Array<Offer>}
     * @memberof Catalog
     */
    offers?: Array<Offer>;
    /**
     * 
     * @type {Array<Provider>}
     * @memberof Catalog
     */
    providers?: Array<Provider>;
    /**
     * Timestamp after which catalog will expire
     * @type {Date}
     * @memberof Catalog
     */
    exp?: Date;
    /**
     * Duration in seconds after which this catalog will expire
     * @type {string}
     * @memberof Catalog
     */
    ttl?: string;
}
/**
 * A label under which a collection of items can be grouped.
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * ID of the category
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * 
     * @type {Categorypropertiesid}
     * @memberof Category
     */
    parentCategoryId?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof Category
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Time}
     * @memberof Category
     */
    time?: Time;
    /**
     * Time to live for an instance of this schema
     * @type {any}
     * @memberof Category
     */
    ttl?: any;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Category
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes a circular region of a specified radius centered at a specified GPS coordinate.
 * @export
 * @interface Circle
 */
export interface Circle {
    /**
     * 
     * @type {Gps}
     * @memberof Circle
     */
    gps?: Gps;
    /**
     * 
     * @type {Scalar}
     * @memberof Circle
     */
    radius?: Scalar;
}
/**
 * Describes a city
 * @export
 * @interface City
 */
export interface City {
    /**
     * Name of the city
     * @type {string}
     * @memberof City
     */
    name?: string;
    /**
     * City code
     * @type {string}
     * @memberof City
     */
    code?: string;
    /**
     * The url to the map of the country. This can be a globally recognized map or the one specified by the network policy.
     * @type {string}
     * @memberof City
     */
    mapUrl?: string;
    /**
     * The geo-spatial polygon representing the boundary of the city
     * @type {string}
     * @memberof City
     */
    boundary?: string;
    /**
     * Any other information regarding the country
     * @type {Array<TagGroup>}
     * @memberof City
     */
    tags?: Array<TagGroup>;
}
/**
 * 
 * @export
 * @interface ConfirmBody
 */
export interface ConfirmBody {
    /**
     * 
     * @type {Context & any}
     * @memberof ConfirmBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof ConfirmBody
     */
    message: SelectMessage;
}
/**
 * Describes the contact information of an entity
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    email?: string;
    /**
     * A Jcard object as per draft-ietf-jcardcal-jcard-03 specification
     * @type {any}
     * @memberof Contact
     */
    jcard?: any;
}
/**
 * Every API call in beckn protocol has a context. It provides a high-level overview to the receiver about the nature of the intended transaction. Typically, it is the BAP that sets the transaction context based on the consumer's location and action on their UI. But sometimes, during unsolicited callbacks, the BPP also sets the transaction context but it is usually the same as the context of a previous full-cycle, request-callback interaction between the BAP and the BPP. The context object contains four types of fields. <ol><li>Demographic information about the transaction using fields like `domain`, `country`, and `region`.</li><li>Addressing details like the sending and receiving platform's ID and API URL.</li><li>Interoperability information like the protocol version that implemented by the sender and,</li><li>Transaction details like the method being called at the receiver's endpoint, the transaction_id that represents an end-to-end user session at the BAP, a message ID to pair requests with callbacks, a timestamp to capture sending times, a ttl to specifiy the validity of the request, and a key to encrypt information if necessary.</li></ol> This object must be passed in every interaction between a BAP and a BPP. In HTTP/S implementations, it is not necessary to send the context during the synchronous response. However, in asynchronous protocols, the context must be sent during all interactions,
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * Domain code that is relevant to this transaction context
     * @type {Domainpropertiescode}
     * @memberof Context
     */
    domain?: string;
    /**
     * The ISO 3166-1 or ISO 3166-2 code representing the country where the transaction is intended to be fulfilled. If the consumer and provider are in separate countries, this field will carry the country code of the consumer.
     * @type {Countrypropertiescode}
     * @memberof Context
     */
    country?: string;
    /**
     * The region code where the transaction is intended to be fulfilled.
     * @type {Regionpropertiescode}
     * @memberof Context
     */
    region?: string;
    /**
     * The Beckn protocol method being called by the sender and executed at the receiver.
     * @type {string}
     * @memberof Context
     */
    action?: string;
    /**
     * Version of transaction protocol being used by the sender.
     * @type {string}
     * @memberof Context
     */
    version?: string;
    /**
     * Subscriber ID of the BAP
     * @type {string}
     * @memberof Context
     */
    bapId?: string;
    /**
     * Subscriber URL of the BAP for accepting callbacks from BPPs.
     * @type {string}
     * @memberof Context
     */
    bapUri?: string;
    /**
     * Subscriber ID of the BPP
     * @type {ContextpropertiesbapIdallOf0}
     * @memberof Context
     */
    bppId?: string;
    /**
     * Subscriber URL of the BPP for accepting calls from BAPs.
     * @type {ContextpropertiesbapUriallOf0}
     * @memberof Context
     */
    bppUri?: string;
    /**
     * This is a unique value which persists across all API calls from `search` through `confirm`. This is done to indicate an active user session across multiple requests. The BPPs can use this value to push personalized recommendations, and dynamic offerings related to an ongoing transaction despite being unaware of the user active on the BAP.
     * @type {string}
     * @memberof Context
     */
    transactionId?: string;
    /**
     * This is a unique value which persists during a request / callback cycle. Since beckn protocol APIs are asynchronous, BAPs need a common value to match an incoming callback from a BPP to an earlier call. This value can also be used to ignore duplicate messages coming from the BPP. It is recommended to generate a fresh message_id for every new interaction. When sending unsolicited callbacks, BPPs must generate a new message_id.
     * @type {string}
     * @memberof Context
     */
    messageId?: string;
    /**
     * Time of request generation in RFC3339 format
     * @type {Date}
     * @memberof Context
     */
    timestamp?: Date;
    /**
     * The encryption public key of the sender
     * @type {string}
     * @memberof Context
     */
    key?: string;
    /**
     * The duration in ISO8601 format after timestamp for which this message holds valid
     * @type {string}
     * @memberof Context
     */
    ttl?: string;
}
/**
 * Describes a country
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * Name of the country
     * @type {string}
     * @memberof Country
     */
    name?: string;
    /**
     * Country code as per ISO 3166-1 and ISO 3166-2 format
     * @type {string}
     * @memberof Country
     */
    code?: string;
    /**
     * The url to the map of the country. This can be a globally recognized map or the one specified by the network policy.
     * @type {string}
     * @memberof Country
     */
    mapUrl?: string;
    /**
     * The geo-spatial polygon representing the boundary of the country
     * @type {string}
     * @memberof Country
     */
    boundary?: string;
    /**
     * Any other information regarding the country
     * @type {Array<TagGroup>}
     * @memberof Country
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes the state of a country
 * @export
 * @interface CountryState
 */
export interface CountryState {
    /**
     * Name of the state
     * @type {string}
     * @memberof CountryState
     */
    name?: string;
    /**
     * State code as per country or international standards
     * @type {string}
     * @memberof CountryState
     */
    code?: string;
    /**
     * The url to the map of the state. This can be a globally recognized map or the one specified by the network policy.
     * @type {string}
     * @memberof CountryState
     */
    mapUrl?: string;
    /**
     * The geo-spatial polygon representing the boundary of the state
     * @type {string}
     * @memberof CountryState
     */
    boundary?: string;
    /**
     * Any other information regarding the state
     * @type {Array<TagGroup>}
     * @memberof CountryState
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes a credential of an entity - Person or Organization
 * @export
 * @interface Credential
 */
export interface Credential {
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    type?: string;
    /**
     * URL of the credential
     * @type {string}
     * @memberof Credential
     */
    url?: string;
}
/**
 * Describes a customer buying/availing a product or a service
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {Person}
     * @memberof Customer
     */
    person?: Person;
    /**
     * 
     * @type {Contact}
     * @memberof Customer
     */
    contact?: Contact;
}
/**
 * Describes a numerical value in decimal form
 * @export
 */
export type DecimalValue = string
/**
 * Physical description of something.
 * @export
 * @interface Descriptor
 */
export interface Descriptor {
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    shortDesc?: string;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    longDesc?: string;
    /**
     * 
     * @type {DescriptorAdditionalDesc}
     * @memberof Descriptor
     */
    additionalDesc?: DescriptorAdditionalDesc;
    /**
     * 
     * @type {Array<MediaFile>}
     * @memberof Descriptor
     */
    media?: Array<MediaFile>;
    /**
     * 
     * @type {Array<Image>}
     * @memberof Descriptor
     */
    images?: Array<Image>;
}
/**
 * 
 * @export
 * @interface DescriptorAdditionalDesc
 */
export interface DescriptorAdditionalDesc {
    /**
     * 
     * @type {string}
     * @memberof DescriptorAdditionalDesc
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof DescriptorAdditionalDesc
     */
    contentType?: DescriptorAdditionalDesc.ContentTypeEnum;
}

/**
 * @export
 * @namespace DescriptorAdditionalDesc
 */
export namespace DescriptorAdditionalDesc {
    /**
     * @export
     * @enum {string}
     */
    export enum ContentTypeEnum {
        Textplain = <any> 'text/plain',
        Texthtml = <any> 'text/html',
        Applicationjson = <any> 'application/json'
    }
}
/**
 * Described the industry sector or sub-sector. The network policy should contain codes for all the industry sectors supported by the network. Domains can be created in varying levels of granularity. The granularity of a domain can be decided by the participants of the network. Too broad domains will result in irrelevant search broadcast calls to BPPs that don't have services supporting the domain. Too narrow domains will result in a large number of registry entries for each BPP. It is recommended that network facilitators actively collaborate with various working groups and network participants to carefully choose domain codes keeping in mind relevance, performance, and opportunity cost. It is recommended that networks choose broad domains like mobility, logistics, healthcare etc, and progressively granularize them as and when the number of network participants for each domain grows large.
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * Name of the domain
     * @type {string}
     * @memberof Domain
     */
    name?: string;
    /**
     * Standard code representing the domain. The standard is usually published as part of the network policy. Furthermore, the network facilitator should also provide a mechanism to provide the supported domains of a network.
     * @type {any}
     * @memberof Domain
     */
    code?: any;
    /**
     * A url that contains addtional information about that domain.
     * @type {MediaFile}
     * @memberof Domain
     */
    additionalInfo?: MediaFile;
}
/**
 * Describes duration as per ISO8601 format
 * @export
 */
export type Duration = string
/**
 * A fee applied on a particular entity
 * @export
 * @interface Fee
 */
export interface Fee {
    /**
     * Percentage of a value
     * @type {DecimalValue}
     * @memberof Fee
     */
    percentage?: DecimalValue;
    /**
     * A fixed value
     * @type {Price}
     * @memberof Fee
     */
    amount?: Price;
}
/**
 * Describes a form
 * @export
 * @interface Form
 */
export interface Form {
    /**
     * The URL from where the form can be fetched. The content fetched from the url must be processed as per the mime_type specified in this object. Once fetched, the rendering platform can choosed to render the form as-is as an embeddable element; or process it further to blend with the theme of the application. In case the interface is non-visual, the the render can process the form data and reproduce it as per the standard specified in the form.
     * @type {string}
     * @memberof Form
     */
    url?: string;
    /**
     * The form content string. This content will again follow the mime_type field for processing. Typically forms should be sent as an html string starting with <form></form> tags. The application must render this form after removing any css or javascript code if necessary. The `action` attribute in the form should have a url where the form needs to be submitted.
     * @type {string}
     * @memberof Form
     */
    data?: string;
    /**
     * This field indicates the nature and format of the form received by querying the url. MIME types are defined and standardized in IETF's RFC 6838.
     * @type {string}
     * @memberof Form
     */
    mimeType?: string;
}
/**
 * Describes how a an order will be rendered/fulfilled to the end-customer
 * @export
 * @interface Fulfillment
 */
export interface Fulfillment {
    /**
     * Unique reference ID to the fulfillment of an order
     * @type {string}
     * @memberof Fulfillment
     */
    id?: string;
    /**
     * A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.
     * @type {string}
     * @memberof Fulfillment
     */
    type?: string;
    /**
     * Whether the fulfillment can be rated or not
     * @type {boolean}
     * @memberof Fulfillment
     */
    rateable?: boolean;
    /**
     * The rating value of the fulfullment service.
     * @type {Ratingpropertiesvalue}
     * @memberof Fulfillment
     */
    rating?: string;
    /**
     * The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited `on_status` call.
     * @type {State}
     * @memberof Fulfillment
     */
    state?: State;
    /**
     * Indicates whether the fulfillment allows tracking
     * @type {boolean}
     * @memberof Fulfillment
     */
    tracking?: boolean;
    /**
     * The person that will ultimately receive the order
     * @type {Customer}
     * @memberof Fulfillment
     */
    customer?: Customer;
    /**
     * The agent that is currently handling the fulfillment of the order
     * @type {Agent}
     * @memberof Fulfillment
     */
    agent?: Agent;
    /**
     * 
     * @type {Contact}
     * @memberof Fulfillment
     */
    contact?: Contact;
    /**
     * 
     * @type {Vehicle}
     * @memberof Fulfillment
     */
    vehicle?: Vehicle;
    /**
     * The list of logical stops encountered during the fulfillment of an order.
     * @type {Array<Stop>}
     * @memberof Fulfillment
     */
    stops?: Array<Stop>;
    /**
     * The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.
     * @type {string}
     * @memberof Fulfillment
     */
    path?: string;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Fulfillment
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes a GPS coordinate
 * @export
 */
export type Gps = string
/**
 * Describes an image
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * URL to the image. This can be a data url or an remote url
     * @type {string}
     * @memberof Image
     */
    url?: string;
    /**
     * The size of the image. The network policy can define the default dimensions of each type
     * @type {string}
     * @memberof Image
     */
    sizeType?: Image.SizeTypeEnum;
    /**
     * Width of the image in pixels
     * @type {string}
     * @memberof Image
     */
    width?: string;
    /**
     * Height of the image in pixels
     * @type {string}
     * @memberof Image
     */
    height?: string;
}

/**
 * @export
 * @namespace Image
 */
export namespace Image {
    /**
     * @export
     * @enum {string}
     */
    export enum SizeTypeEnum {
        Xs = <any> 'xs',
        Sm = <any> 'sm',
        Md = <any> 'md',
        Lg = <any> 'lg',
        Xl = <any> 'xl',
        Custom = <any> 'custom'
    }
}
/**
 * 
 * @export
 * @interface InitBody
 */
export interface InitBody {
    /**
     * 
     * @type {Context & any}
     * @memberof InitBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof InitBody
     */
    message: SelectMessage;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     * 
     * @type {InlineResponseDefaultMessage}
     * @memberof InlineResponseDefault
     */
    message: InlineResponseDefaultMessage;
    /**
     * 
     * @type {Error}
     * @memberof InlineResponseDefault
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface InlineResponseDefaultMessage
 */
export interface InlineResponseDefaultMessage {
    /**
     * 
     * @type {Ack & any}
     * @memberof InlineResponseDefaultMessage
     */
    ack: Ack & any;
}
/**
 * The intent to buy or avail a product or a service. The BAP can declare the intent of the consumer containing <ul><li>What they want (A product, service, offer)</li><li>Who they want (A seller, service provider, agent etc)</li><li>Where they want it and where they want it from</li><li>When they want it (start and end time of fulfillment</li><li>How they want to pay for it</li></ul><br>This has properties like descriptor,provider,fulfillment,payment,category,offer,item,tags<br>This is typically used by the BAP to send the purpose of the user's search to the BPP. This will be used by the BPP to find products or services it offers that may match the user's intent.<br>For example, in Mobility, the mobility consumer declares a mobility intent. In this case, the mobility consumer declares information that describes various aspects of their journey like,<ul><li>Where would they like to begin their journey (intent.fulfillment.start.location)</li><li>Where would they like to end their journey (intent.fulfillment.end.location)</li><li>When would they like to begin their journey (intent.fulfillment.start.time)</li><li>When would they like to end their journey (intent.fulfillment.end.time)</li><li>Who is the transport service provider they would like to avail services from (intent.provider)</li><li>Who is traveling (This is not recommended in public networks) (intent.fulfillment.customer)</li><li>What kind of fare product would they like to purchase (intent.item)</li><li>What add-on services would they like to avail</li><li>What offers would they like to apply on their booking (intent.offer)</li><li>What category of services would they like to avail (intent.category)</li><li>What additional luggage are they carrying</li><li>How would they like to pay for their journey (intent.payment)</li></ul><br>For example, in health domain, a consumer declares the intent for a lab booking the describes various aspects of their booking like,<ul><li>Where would they like to get their scan/test done (intent.fulfillment.start.location)</li><li>When would they like to get their scan/test done (intent.fulfillment.start.time)</li><li>When would they like to get the results of their test/scan (intent.fulfillment.end.time)</li><li>Who is the service provider they would like to avail services from (intent.provider)</li><li>Who is getting the test/scan (intent.fulfillment.customer)</li><li>What kind of test/scan would they like to purchase (intent.item)</li><li>What category of services would they like to avail (intent.category)</li><li>How would they like to pay for their journey (intent.payment)</li></ul>
 * @export
 * @interface Intent
 */
export interface Intent {
    /**
     * A raw description of the search intent. Free text search strings, raw audio, etc can be sent in this object.
     * @type {Descriptor}
     * @memberof Intent
     */
    descriptor?: Descriptor;
    /**
     * The provider from which the customer wants to place to the order from
     * @type {Provider}
     * @memberof Intent
     */
    provider?: Provider;
    /**
     * Details on how the customer wants their order fulfilled
     * @type {Fulfillment}
     * @memberof Intent
     */
    fulfillment?: Fulfillment;
    /**
     * Details on how the customer wants to pay for the order
     * @type {Payment}
     * @memberof Intent
     */
    payment?: Payment;
    /**
     * Details on the item category
     * @type {Category}
     * @memberof Intent
     */
    category?: Category;
    /**
     * details on the offer the customer wants to avail
     * @type {Offer}
     * @memberof Intent
     */
    offer?: Offer;
    /**
     * Details of the item that the consumer wants to order
     * @type {Item}
     * @memberof Intent
     */
    item?: Item;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Intent
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes a product or a service offered to the end consumer by the provider. In the mobility sector, it can represent a fare product like one way journey. In the logistics sector, it can represent the delivery service offering. In the retail domain it can represent a product like a grocery item.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * ID of the item.
     * @type {string}
     * @memberof Item
     */
    id?: string;
    /**
     * ID of the item, this item is a variant of
     * @type {Itempropertiesid}
     * @memberof Item
     */
    parentItemId?: string;
    /**
     * The number of units of the parent item, this item is a multiple of
     * @type {ItemQuantity}
     * @memberof Item
     */
    parentItemQuantity?: ItemQuantity;
    /**
     * Physical description of the item
     * @type {Descriptor}
     * @memberof Item
     */
    descriptor?: Descriptor;
    /**
     * The manufacturer of this item. Relevant only for retail use cases
     * @type {Organization}
     * @memberof Item
     */
    manufacturer?: Organization;
    /**
     * The selling price of this item
     * @type {Price}
     * @memberof Item
     */
    price?: Price;
    /**
     * The selling quantity of the item
     * @type {ItemQuantity}
     * @memberof Item
     */
    quantity?: ItemQuantity;
    /**
     * Categories this item can be listed under
     * @type {Array<Categorypropertiesid>}
     * @memberof Item
     */
    categoryIds?: Array<string>;
    /**
     * Fulfillment modes through which this item can be ordered
     * @type {Array<Fulfillmentpropertiesid>}
     * @memberof Item
     */
    fulfillmentIds?: Array<string>;
    /**
     * Provider Locations this item is available in
     * @type {Array<Locationpropertiesid>}
     * @memberof Item
     */
    locationIds?: Array<string>;
    /**
     * Payment modes through which this item can be ordered
     * @type {Array<Paymentpropertiesid>}
     * @memberof Item
     */
    paymentIds?: Array<string>;
    /**
     * 
     * @type {Array<AddOn>}
     * @memberof Item
     */
    addOns?: Array<AddOn>;
    /**
     * Cancellation terms of this item
     * @type {Array<CancellationTerm>}
     * @memberof Item
     */
    cancellationTerms?: Array<CancellationTerm>;
    /**
     * Replacement terms of this item
     * @type {Array<ReplacementTerm>}
     * @memberof Item
     */
    replacementTerms?: Array<ReplacementTerm>;
    /**
     * Additional input required from the customer to purchase / avail this item
     * @type {XInput}
     * @memberof Item
     */
    xinputRequired?: XInput;
    /**
     * 
     * @type {XInputResponse}
     * @memberof Item
     */
    xinputResponse?: XInputResponse;
    /**
     * Temporal attributes of this item. This property is used when the item exists on the catalog only for a limited period of time.
     * @type {Time}
     * @memberof Item
     */
    time?: Time;
    /**
     * Whether this item can be rated
     * @type {boolean}
     * @memberof Item
     */
    rateable?: boolean;
    /**
     * The rating of the item
     * @type {Ratingpropertiesvalue}
     * @memberof Item
     */
    rating?: string;
    /**
     * Whether this item is an exact match of the request
     * @type {boolean}
     * @memberof Item
     */
    matched?: boolean;
    /**
     * Whether this item is a related item to the exactly matched item
     * @type {boolean}
     * @memberof Item
     */
    related?: boolean;
    /**
     * Whether this item is a recommended item to a response
     * @type {boolean}
     * @memberof Item
     */
    recommended?: boolean;
    /**
     * Time to live in seconds for an instance of this schema
     * @type {string}
     * @memberof Item
     */
    ttl?: string;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Item
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes the count or amount of an item
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * 
     * @type {ItemQuantityAllocated}
     * @memberof ItemQuantity
     */
    allocated?: ItemQuantityAllocated;
    /**
     * 
     * @type {ItemQuantityAvailable}
     * @memberof ItemQuantity
     */
    available?: ItemQuantityAvailable;
    /**
     * 
     * @type {ItemQuantityMaximum}
     * @memberof ItemQuantity
     */
    maximum?: ItemQuantityMaximum;
    /**
     * 
     * @type {ItemQuantityMinimum}
     * @memberof ItemQuantity
     */
    minimum?: ItemQuantityMinimum;
    /**
     * 
     * @type {ItemQuantitySelected}
     * @memberof ItemQuantity
     */
    selected?: ItemQuantitySelected;
    /**
     * 
     * @type {ItemQuantityUnitized}
     * @memberof ItemQuantity
     */
    unitized?: ItemQuantityUnitized;
}
/**
 * This represents the exact quantity allocated for purchase of the item.
 * @export
 * @interface ItemQuantityAllocated
 */
export interface ItemQuantityAllocated {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantityAllocated
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantityAllocated
     */
    measure?: Scalar;
}
/**
 * This represents the exact quantity available for purchase of the item. The buyer can only purchase multiples of this
 * @export
 * @interface ItemQuantityAvailable
 */
export interface ItemQuantityAvailable {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantityAvailable
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantityAvailable
     */
    measure?: Scalar;
}
/**
 * This represents the maximum quantity allowed for purchase of the item
 * @export
 * @interface ItemQuantityMaximum
 */
export interface ItemQuantityMaximum {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantityMaximum
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantityMaximum
     */
    measure?: Scalar;
}
/**
 * This represents the minimum quantity allowed for purchase of the item
 * @export
 * @interface ItemQuantityMinimum
 */
export interface ItemQuantityMinimum {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantityMinimum
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantityMinimum
     */
    measure?: Scalar;
}
/**
 * This represents the quantity selected for purchase of the item
 * @export
 * @interface ItemQuantitySelected
 */
export interface ItemQuantitySelected {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantitySelected
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantitySelected
     */
    measure?: Scalar;
}
/**
 * This represents the quantity available in a single unit of the item
 * @export
 * @interface ItemQuantityUnitized
 */
export interface ItemQuantityUnitized {
    /**
     * 
     * @type {number}
     * @memberof ItemQuantityUnitized
     */
    count?: number;
    /**
     * 
     * @type {Scalar}
     * @memberof ItemQuantityUnitized
     */
    measure?: Scalar;
}
/**
 * The physical location of something
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    id?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof Location
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Gps}
     * @memberof Location
     */
    gps?: Gps;
    /**
     * 
     * @type {Address}
     * @memberof Location
     */
    address?: Address;
    /**
     * 
     * @type {City}
     * @memberof Location
     */
    city?: City;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    district?: string;
    /**
     * 
     * @type {CountryState}
     * @memberof Location
     */
    state?: CountryState;
    /**
     * 
     * @type {Country}
     * @memberof Location
     */
    country?: Country;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    areaCode?: string;
    /**
     * 
     * @type {Circle}
     * @memberof Location
     */
    circle?: Circle;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    polygon?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    _3dspace?: string;
    /**
     * 
     * @type {Time}
     * @memberof Location
     */
    time?: Time;
    /**
     * 
     * @type {Date}
     * @memberof Location
     */
    updatedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Location
     */
    rateable?: boolean;
}
/**
 * This object contains a url to a media file.
 * @export
 * @interface MediaFile
 */
export interface MediaFile {
    /**
     * indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838
     * @type {string}
     * @memberof MediaFile
     */
    mimetype?: string;
    /**
     * The URL of the file
     * @type {string}
     * @memberof MediaFile
     */
    url?: string;
    /**
     * The digital signature of the file signed by the sender
     * @type {string}
     * @memberof MediaFile
     */
    signature?: string;
    /**
     * The signing algorithm used by the sender
     * @type {string}
     * @memberof MediaFile
     */
    dsa?: string;
}
/**
 * Describes an error object that is returned by a BAP, BPP or BG as a response or callback to an action by another network participant. This object is sent when any request received by a network participant is unacceptable. This object can be sent either during Ack or with the callback.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Standard error code. For full list of error codes, refer to docs/protocol-drafts/BECKN-005-ERROR-CODES-DRAFT-01.md of this repo\"
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * Path to json schema generating the error. Used only during json schema validation errors
     * @type {string}
     * @memberof ModelError
     */
    paths?: string;
    /**
     * Human readable message describing the error. Used mainly for logging. Not recommended to be shown to the user.
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
}
/**
 * An offer associated with a catalog. This is typically used to promote a particular product and enable more purchases.
 * @export
 * @interface Offer
 */
export interface Offer {
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    id?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof Offer
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Array<Locationpropertiesid>}
     * @memberof Offer
     */
    locationIds?: Array<string>;
    /**
     * 
     * @type {Array<Categorypropertiesid>}
     * @memberof Offer
     */
    categoryIds?: Array<string>;
    /**
     * 
     * @type {Array<Itempropertiesid>}
     * @memberof Offer
     */
    itemIds?: Array<string>;
    /**
     * 
     * @type {Time}
     * @memberof Offer
     */
    time?: Time;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Offer
     */
    tags?: Array<TagGroup>;
}
/**
 * 
 * @export
 * @interface OnCancelBody
 */
export interface OnCancelBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnCancelBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof OnCancelBody
     */
    message?: SelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnCancelBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnConfirmBody
 */
export interface OnConfirmBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnConfirmBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof OnConfirmBody
     */
    message?: SelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnConfirmBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnInitBody
 */
export interface OnInitBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnInitBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof OnInitBody
     */
    message?: SelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnInitBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnRatingBody
 */
export interface OnRatingBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnRatingBody
     */
    context: Context & any;
    /**
     * 
     * @type {OnRatingMessage}
     * @memberof OnRatingBody
     */
    message?: OnRatingMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnRatingBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnRatingMessage
 */
export interface OnRatingMessage {
    /**
     * A feedback form to allow the user to provide additional information on the rating provided
     * @type {Form}
     * @memberof OnRatingMessage
     */
    feedback?: Form;
}
/**
 * 
 * @export
 * @interface OnSearchBody
 */
export interface OnSearchBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnSearchBody
     */
    context: Context & any;
    /**
     * 
     * @type {OnSearchMessage}
     * @memberof OnSearchBody
     */
    message?: OnSearchMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnSearchBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnSearchMessage
 */
export interface OnSearchMessage {
    /**
     * 
     * @type {Catalog}
     * @memberof OnSearchMessage
     */
    catalog: Catalog;
}
/**
 * 
 * @export
 * @interface OnSelectBody
 */
export interface OnSelectBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnSelectBody
     */
    context: Context & any;
    /**
     * 
     * @type {OnSelectMessage}
     * @memberof OnSelectBody
     */
    message?: OnSelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnSelectBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnSelectMessage
 */
export interface OnSelectMessage {
    /**
     * 
     * @type {Order}
     * @memberof OnSelectMessage
     */
    order?: Order;
}
/**
 * 
 * @export
 * @interface OnStatusBody
 */
export interface OnStatusBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnStatusBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof OnStatusBody
     */
    message?: SelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnStatusBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnSupportBody
 */
export interface OnSupportBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnSupportBody
     */
    context: Context & any;
    /**
     * 
     * @type {SupportMessage}
     * @memberof OnSupportBody
     */
    message?: SupportMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnSupportBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnTrackBody
 */
export interface OnTrackBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnTrackBody
     */
    context: Context & any;
    /**
     * 
     * @type {OnTrackMessage}
     * @memberof OnTrackBody
     */
    message?: OnTrackMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnTrackBody
     */
    error?: Error;
}
/**
 * 
 * @export
 * @interface OnTrackMessage
 */
export interface OnTrackMessage {
    /**
     * 
     * @type {Tracking}
     * @memberof OnTrackMessage
     */
    tracking: Tracking;
}
/**
 * 
 * @export
 * @interface OnUpdateBody
 */
export interface OnUpdateBody {
    /**
     * 
     * @type {Context & any}
     * @memberof OnUpdateBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof OnUpdateBody
     */
    message?: SelectMessage;
    /**
     * 
     * @type {Error}
     * @memberof OnUpdateBody
     */
    error?: Error;
}
/**
 * Describes a selectable option<br>This has properties like id,description
 * @export
 * @interface Option
 */
export interface Option {
    /**
     * 
     * @type {string}
     * @memberof Option
     */
    id?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof Option
     */
    descriptor?: Descriptor;
}
/**
 * Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * A list of order IDs to link this order to previous orders.
     * @type {Array<string>}
     * @memberof Order
     */
    refOrderIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    state?: Order.StateEnum;
    /**
     * This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
     * @type {string}
     * @memberof Order
     */
    type?: Order.TypeEnum;
    /**
     * Details of the provider whose catalog items have been selected.
     * @type {Provider}
     * @memberof Order
     */
    provider?: Provider;
    /**
     * The items purchased / availed in this order
     * @type {Array<Item>}
     * @memberof Order
     */
    items?: Array<Item>;
    /**
     * The add-ons purchased / availed in this order
     * @type {Array<AddOn>}
     * @memberof Order
     */
    addOns?: Array<AddOn>;
    /**
     * The offers applied in this order
     * @type {Array<Offer>}
     * @memberof Order
     */
    offers?: Array<Offer>;
    /**
     * The billing details of this order
     * @type {Billing}
     * @memberof Order
     */
    billing?: Billing;
    /**
     * The fulfillments involved in completing this order
     * @type {Array<Fulfillment>}
     * @memberof Order
     */
    fulfillments?: Array<Fulfillment>;
    /**
     * The cancellation details of this order
     * @type {Cancellation}
     * @memberof Order
     */
    cancellation?: Cancellation;
    /**
     * The cancellation terms of this order. This can be overriden at the item level cancellation terms.
     * @type {Array<CancellationTerm>}
     * @memberof Order
     */
    cancellationTerms?: Array<CancellationTerm>;
    /**
     * The mutually agreed upon quotation for this order.
     * @type {Quotation}
     * @memberof Order
     */
    quote?: Quotation;
    /**
     * The terms of settlement for this order
     * @type {Array<Payment>}
     * @memberof Order
     */
    payments?: Array<Payment>;
    /**
     * The date-time of creation of this order
     * @type {Date}
     * @memberof Order
     */
    createdAt?: Date;
    /**
     * The date-time of updated of this order
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date;
    /**
     * Additional input required from the customer to confirm this order
     * @type {XInput}
     * @memberof Order
     */
    xinputRequired?: XInput;
    /**
     * 
     * @type {XInputResponse}
     * @memberof Order
     */
    xinputResponse?: XInputResponse;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Order
     */
    tags?: Array<TagGroup>;
}

/**
 * @export
 * @namespace Order
 */
export namespace Order {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        ACTIVE = <any> 'ACTIVE',
        COMPLETE = <any> 'COMPLETE',
        CANCELLED = <any> 'CANCELLED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        DRAFT = <any> 'DRAFT',
        DEFAULT = <any> 'DEFAULT'
    }
}
/**
 * An organization. Usually a recognized business entity.
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {Descriptor}
     * @memberof Organization
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Address}
     * @memberof Organization
     */
    address?: Address;
    /**
     * 
     * @type {Contact}
     * @memberof Organization
     */
    contact?: Contact;
}
/**
 * Describes the terms of settlement between the BAP and the BPP for a single transaction. When instantiated, this object contains <ol><li>the amount that has to be settled,</li><li>The payment destination destination details</li><li>When the settlement should happen, and</li><li>A transaction reference ID</li></ol>. During a transaction, the BPP reserves the right to decide the terms of payment. However, the BAP can send its terms to the BPP first. If the BPP does not agree to those terms, it must overwrite the terms and return them to the BAP. If overridden, the BAP must either agree to the terms sent by the BPP in order to preserve the provider's autonomy, or abort the transaction. In case of such disagreements, the BAP and the BPP can perform offline negotiations on the payment terms. Once an agreement is reached, the BAP and BPP can resume transactions.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * ID of the payment term that can be referred at an item or an order level in a catalog
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     * This field indicates who is the collector of payment. The BAP can set this value to 'bap' if it wants to collect the payment first and  settle it to the BPP. If the BPP agrees to those terms, the BPP should not send the payment url. Alternatively, the BPP can set this field with the value 'bpp' if it wants the payment to be made directly.
     * @type {any}
     * @memberof Payment
     */
    collectedBy?: any;
    /**
     * A payment url to be called by the BAP. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If tl_method = http/get, then the payment details will be sent as url params. Two url param values, ```$transaction_id``` and ```$amount``` are mandatory.
     * @type {string}
     * @memberof Payment
     */
    url?: string;
    /**
     * 
     * @type {PaymentParams}
     * @memberof Payment
     */
    params?: PaymentParams;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    type?: Payment.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    status?: Payment.StatusEnum;
    /**
     * 
     * @type {Time}
     * @memberof Payment
     */
    time?: Time;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Payment
     */
    tags?: Array<TagGroup>;
}

/**
 * @export
 * @namespace Payment
 */
export namespace Payment {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ONORDER = <any> 'ON-ORDER',
        PREFULFILLMENT = <any> 'PRE-FULFILLMENT',
        ONFULFILLMENT = <any> 'ON-FULFILLMENT',
        POSTFULFILLMENT = <any> 'POST-FULFILLMENT'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        PAID = <any> 'PAID',
        NOTPAID = <any> 'NOT-PAID'
    }
}
/**
 * 
 * @export
 * @interface PaymentParams
 */
export interface PaymentParams {
    /**
     * The reference transaction ID associated with a payment activity
     * @type {string}
     * @memberof PaymentParams
     */
    transactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    bankCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    bankAccountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    virtualPaymentAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    sourceBankCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    sourceBankAccountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentParams
     */
    sourceVirtualPaymentAddress?: string;
}
/**
 * Describes a person as any individual
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * Describes the identity of the person
     * @type {string}
     * @memberof Person
     */
    id?: string;
    /**
     * the name of the person
     * @type {string}
     * @memberof Person
     */
    name?: string;
    /**
     * 
     * @type {Image}
     * @memberof Person
     */
    image?: Image;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    age?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    dob?: string;
    /**
     * Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.Allowed values for this field can be published in the network policy
     * @type {string}
     * @memberof Person
     */
    gender?: string;
    /**
     * 
     * @type {Array<Credential>}
     * @memberof Person
     */
    creds?: Array<Credential>;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Person
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes the price of a product or service
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * 
     * @type {string}
     * @memberof Price
     */
    currency?: string;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    value?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    estimatedValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    computedValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    listedValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    offeredValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    minimumValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Price
     */
    maximumValue?: DecimalValue;
}
/**
 * Describes the catalog of a business.
 * @export
 * @interface Provider
 */
export interface Provider {
    /**
     * Id of the provider
     * @type {string}
     * @memberof Provider
     */
    id?: string;
    /**
     * 
     * @type {Descriptor}
     * @memberof Provider
     */
    descriptor?: Descriptor;
    /**
     * Category Id of the provider at the BPP-level catalog
     * @type {string}
     * @memberof Provider
     */
    categoryId?: string;
    /**
     * 
     * @type {Ratingpropertiesvalue}
     * @memberof Provider
     */
    rating?: string;
    /**
     * 
     * @type {Time}
     * @memberof Provider
     */
    time?: Time;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Provider
     */
    categories?: Array<Category>;
    /**
     * 
     * @type {Array<Fulfillment>}
     * @memberof Provider
     */
    fulfillments?: Array<Fulfillment>;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof Provider
     */
    payments?: Array<Payment>;
    /**
     * 
     * @type {Array<Location>}
     * @memberof Provider
     */
    locations?: Array<Location>;
    /**
     * 
     * @type {Array<Offer>}
     * @memberof Provider
     */
    offers?: Array<Offer>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Provider
     */
    items?: Array<Item>;
    /**
     * Time after which catalog has to be refreshed
     * @type {Date}
     * @memberof Provider
     */
    exp?: Date;
    /**
     * Whether this provider can be rated or not
     * @type {boolean}
     * @memberof Provider
     */
    rateable?: boolean;
    /**
     * The time-to-live in seconds, for this object. This can be overriden at deeper levels. A value of -1 indicates that this object is not cacheable.
     * @type {number}
     * @memberof Provider
     */
    ttl?: number;
    /**
     * 
     * @type {Array<TagGroup>}
     * @memberof Provider
     */
    tags?: Array<TagGroup>;
}
/**
 * Describes a quote. It is the estimated price of products or services from the BPP.<br>This has properties like price, breakup, ttl
 * @export
 * @interface Quotation
 */
export interface Quotation {
    /**
     * ID of the quote.
     * @type {string}
     * @memberof Quotation
     */
    id?: string;
    /**
     * The total quoted price
     * @type {Price}
     * @memberof Quotation
     */
    price?: Price;
    /**
     * the breakup of the total quoted price
     * @type {Array<QuotationBreakup>}
     * @memberof Quotation
     */
    breakup?: Array<QuotationBreakup>;
    /**
     * 
     * @type {Duration}
     * @memberof Quotation
     */
    ttl?: Duration;
}
/**
 * 
 * @export
 * @interface QuotationBreakup
 */
export interface QuotationBreakup {
    /**
     * 
     * @type {Item}
     * @memberof QuotationBreakup
     */
    item?: Item;
    /**
     * 
     * @type {string}
     * @memberof QuotationBreakup
     */
    title?: string;
    /**
     * 
     * @type {Price}
     * @memberof QuotationBreakup
     */
    price?: Price;
}
/**
 * Describes the rating of an entity
 * @export
 * @interface Rating
 */
export interface Rating {
    /**
     * Category of the entity being rated
     * @type {string}
     * @memberof Rating
     */
    ratingCategory?: Rating.RatingCategoryEnum;
    /**
     * Id of the object being rated
     * @type {string}
     * @memberof Rating
     */
    id?: string;
    /**
     * Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||.
     * @type {string}
     * @memberof Rating
     */
    value?: string;
}

/**
 * @export
 * @namespace Rating
 */
export namespace Rating {
    /**
     * @export
     * @enum {string}
     */
    export enum RatingCategoryEnum {
        Item = <any> 'Item',
        Order = <any> 'Order',
        Fulfillment = <any> 'Fulfillment',
        Provider = <any> 'Provider',
        Agent = <any> 'Agent',
        Support = <any> 'Support'
    }
}
/**
 * 
 * @export
 * @interface RatingBody
 */
export interface RatingBody {
    /**
     * 
     * @type {Context & any}
     * @memberof RatingBody
     */
    context: Context & any;
    /**
     * 
     * @type {RatingMessage}
     * @memberof RatingBody
     */
    message: RatingMessage;
}
/**
 * 
 * @export
 * @interface RatingMessage
 */
export interface RatingMessage {
    /**
     * 
     * @type {Rating}
     * @memberof RatingMessage
     */
    rating?: Rating;
}
/**
 * Describes an arbitrary region of space. The network policy should contain a published list of supported regions by the network.
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * The number of dimensions that are used to describe any point inside that region. The most common dimensionality of a region is 2, that represents an area on a map. There are regions on the map that can be approximated to one-dimensional regions like roads, railway lines, or shipping lines. 3 dimensional regions are rarer, but are gaining popularity as flying drones are being adopted for various fulfillment services.
     * @type {string}
     * @memberof Region
     */
    dimensions?: Region.DimensionsEnum;
    /**
     * The type of region. This is used to specify the granularity of the region represented by this object. Various examples of two-dimensional region types are city, country, state, district, and so on. The network policy should contain a list of all possible region types supported by the network.
     * @type {string}
     * @memberof Region
     */
    type?: string;
    /**
     * Name of the region as specified on the map where that region exists.
     * @type {string}
     * @memberof Region
     */
    name?: string;
    /**
     * A standard code representing the region. This should be interpreted in the same way by all network participants.
     * @type {string}
     * @memberof Region
     */
    code?: string;
    /**
     * A string representing the boundary of the region. One-dimensional regions are represented by polylines. Two-dimensional regions are represented by polygons, and three-dimensional regions can represented by polyhedra.
     * @type {string}
     * @memberof Region
     */
    boundary?: string;
    /**
     * The url to the map of the region. This can be a globally recognized map or the one specified by the network policy.
     * @type {string}
     * @memberof Region
     */
    mapUrl?: string;
}

/**
 * @export
 * @namespace Region
 */
export namespace Region {
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionsEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _3 = <any> '3'
    }
}
/**
 * 
 * @export
 * @interface ReplacementTerm
 */
export interface ReplacementTerm {
    /**
     * Applicable only for buyer managed returns where the buyer has to replace the item before a certain date-time, failing which they will not be eligible for replacement
     * @type {Time}
     * @memberof ReplacementTerm
     */
    replaceWithin?: Time;
    /**
     * 
     * @type {MediaFile}
     * @memberof ReplacementTerm
     */
    externalRef?: MediaFile;
}
/**
 * Describes the return policy of an item or an order
 * @export
 * @interface ReturnTerm
 */
export interface ReturnTerm {
    /**
     * Applicable only for buyer managed returns where the buyer has to return the item to the origin before a certain date-time, failing which they will not be eligible for refund.
     * @type {Time}
     * @memberof ReturnTerm
     */
    returnWithin?: Time;
    /**
     * 
     * @type {string}
     * @memberof ReturnTerm
     */
    fulfillmentManagedBy?: string;
    /**
     * 
     * @type {Location}
     * @memberof ReturnTerm
     */
    returnLocation?: Location;
    /**
     * 
     * @type {MediaFile}
     * @memberof ReturnTerm
     */
    externalRef?: MediaFile;
}
/**
 * Describes a scalar
 * @export
 * @interface Scalar
 */
export interface Scalar {
    /**
     * 
     * @type {string}
     * @memberof Scalar
     */
    type?: Scalar.TypeEnum;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Scalar
     */
    value?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Scalar
     */
    estimatedValue?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof Scalar
     */
    computedValue?: DecimalValue;
    /**
     * 
     * @type {ScalarRange}
     * @memberof Scalar
     */
    range?: ScalarRange;
    /**
     * 
     * @type {string}
     * @memberof Scalar
     */
    unit?: string;
}

/**
 * @export
 * @namespace Scalar
 */
export namespace Scalar {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        CONSTANT = <any> 'CONSTANT',
        VARIABLE = <any> 'VARIABLE'
    }
}
/**
 * 
 * @export
 * @interface ScalarRange
 */
export interface ScalarRange {
    /**
     * 
     * @type {DecimalValue}
     * @memberof ScalarRange
     */
    min?: DecimalValue;
    /**
     * 
     * @type {DecimalValue}
     * @memberof ScalarRange
     */
    max?: DecimalValue;
}
/**
 * Describes schedule as a repeating time period used to describe a regularly recurring event. At a minimum a schedule will specify frequency which describes the interval between occurrences of the event. Additional information can be provided to specify the schedule more precisely. This includes identifying the timestamps(s) of when the event will take place. Schedules may also have holidays to exclude a specific day from the schedule.<br>This has properties like frequency, holidays, times
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {Duration}
     * @memberof Schedule
     */
    frequency?: Duration;
    /**
     * 
     * @type {Array<Date>}
     * @memberof Schedule
     */
    holidays?: Array<Date>;
    /**
     * 
     * @type {Array<Date>}
     * @memberof Schedule
     */
    times?: Array<Date>;
}
/**
 * 
 * @export
 * @interface SearchBody
 */
export interface SearchBody {
    /**
     * 
     * @type {Context & any}
     * @memberof SearchBody
     */
    context: Context & any;
    /**
     * 
     * @type {SearchMessage}
     * @memberof SearchBody
     */
    message: SearchMessage;
}
/**
 * 
 * @export
 * @interface SearchMessage
 */
export interface SearchMessage {
    /**
     * 
     * @type {Intent}
     * @memberof SearchMessage
     */
    intent?: Intent;
}
/**
 * 
 * @export
 * @interface SelectBody
 */
export interface SelectBody {
    /**
     * 
     * @type {Context & any}
     * @memberof SelectBody
     */
    context: Context & any;
    /**
     * 
     * @type {SelectMessage}
     * @memberof SelectBody
     */
    message: SelectMessage;
}
/**
 * 
 * @export
 * @interface SelectMessage
 */
export interface SelectMessage {
    /**
     * 
     * @type {Order}
     * @memberof SelectMessage
     */
    order: Order;
}
/**
 * Describes the state of an order or fulfillment
 * @export
 * @interface State
 */
export interface State {
    /**
     * 
     * @type {Descriptor}
     * @memberof State
     */
    descriptor?: Descriptor;
    /**
     * 
     * @type {Date}
     * @memberof State
     */
    updatedAt?: Date;
    /**
     * ID of entity which changed the state
     * @type {string}
     * @memberof State
     */
    updatedBy?: string;
}
/**
 * 
 * @export
 * @interface StatusBody
 */
export interface StatusBody {
    /**
     * 
     * @type {Context & any}
     * @memberof StatusBody
     */
    context: Context & any;
    /**
     * 
     * @type {StatusMessage}
     * @memberof StatusBody
     */
    message: StatusMessage;
}
/**
 * 
 * @export
 * @interface StatusMessage
 */
export interface StatusMessage {
    /**
     * 
     * @type {Orderpropertiesid}
     * @memberof StatusMessage
     */
    orderId: string;
}
/**
 * A logical point in space and time during the fulfillment of an order.
 * @export
 * @interface Stop
 */
export interface Stop {
    /**
     * 
     * @type {string}
     * @memberof Stop
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Stop
     */
    parentStopId?: string;
    /**
     * Location of the stop
     * @type {Location}
     * @memberof Stop
     */
    location?: Location;
    /**
     * The type of stop. Allowed values of this property can be defined by the network policy.
     * @type {string}
     * @memberof Stop
     */
    type?: string;
    /**
     * Timings applicable at the stop.
     * @type {Time}
     * @memberof Stop
     */
    time?: Time;
    /**
     * Instructions that need to be followed at the stop
     * @type {Descriptor}
     * @memberof Stop
     */
    instructions?: Descriptor;
    /**
     * Contact details of the stop
     * @type {Contact}
     * @memberof Stop
     */
    contact?: Contact;
    /**
     * The details of the person present at the stop
     * @type {Person}
     * @memberof Stop
     */
    person?: Person;
    /**
     * 
     * @type {Authorization}
     * @memberof Stop
     */
    authorization?: Authorization;
}
/**
 * Details of customer support
 * @export
 * @interface Support
 */
export interface Support {
    /**
     * 
     * @type {string}
     * @memberof Support
     */
    refId?: string;
    /**
     * 
     * @type {string}
     * @memberof Support
     */
    callbackPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof Support
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Support
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Support
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface SupportBody
 */
export interface SupportBody {
    /**
     * 
     * @type {Context & any}
     * @memberof SupportBody
     */
    context: Context & any;
    /**
     * 
     * @type {SupportMessage}
     * @memberof SupportBody
     */
    message: SupportMessage;
}
/**
 * 
 * @export
 * @interface SupportMessage
 */
export interface SupportMessage {
    /**
     * 
     * @type {Support}
     * @memberof SupportMessage
     */
    support?: Support;
}
/**
 * Describes a tag. This is a simple key-value store which is used to contain extended metadata. This object can be added as a property to any schema to describe extended attributes. For BAPs, tags can be sent during search to optimize and filter search results. BPPs can use tags to index their catalog to allow better search functionality. Tags are sent by the BPP as part of the catalog response in the `on_search` callback. Tags are also meant for display purposes. Upon receiving a tag, BAPs are meant to render them as name-value pairs. This is particularly useful when rendering tabular information about a product or service.
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * The machine-readable name of the tag. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value.
     * @type {string}
     * @memberof Tag
     */
    code?: string;
    /**
     * The human-readable name of the tag. This set by the BPP and rendered as-is by the BAP. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using the `code` property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency.
     * @type {string}
     * @memberof Tag
     */
    name?: string;
    /**
     * The value of the tag. This set by the BPP and rendered as-is by the BAP.
     * @type {string}
     * @memberof Tag
     */
    value?: string;
    /**
     * This value indicates if the tag is intended for display purposes. If set to `true`, then this tag must be displayed. If it is set to `false`, it should not be displayed. This value can override the group display value.
     * @type {boolean}
     * @memberof Tag
     */
    display?: boolean;
}
/**
 * A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316
 * @export
 * @interface TagGroup
 */
export interface TagGroup {
    /**
     * Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
     * @type {boolean}
     * @memberof TagGroup
     */
    display?: boolean;
    /**
     * The machine-readable name of the tag group. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value. Values outside the allowed values may or may not be ignored by the rendering platform. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
     * @type {string}
     * @memberof TagGroup
     */
    code?: string;
    /**
     * A human-readable string describing the heading under which the tags are to be displayed. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using code property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency. As this schema is purely for catalog display purposes, it is not recommended to send this value during `search`.
     * @type {string}
     * @memberof TagGroup
     */
    name?: string;
    /**
     * An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the `search` and achieve more relevant results. When received during `on_search`, BAPs must render this list under the heading described by the `name` property of this schema.
     * @type {Array<Tag>}
     * @memberof TagGroup
     */
    list?: Array<Tag>;
}
/**
 * Describes time in its various forms. It can be a single point in time; duration; or a structured timetable of operations<br>This has properties like label, time stamp,duration,range, days, schedule
 * @export
 * @interface Time
 */
export interface Time {
    /**
     * 
     * @type {string}
     * @memberof Time
     */
    label?: string;
    /**
     * 
     * @type {Date}
     * @memberof Time
     */
    timestamp?: Date;
    /**
     * 
     * @type {Duration}
     * @memberof Time
     */
    duration?: Duration;
    /**
     * 
     * @type {TimeRange}
     * @memberof Time
     */
    range?: TimeRange;
    /**
     * comma separated values representing days of the week
     * @type {string}
     * @memberof Time
     */
    days?: string;
    /**
     * 
     * @type {Schedule}
     * @memberof Time
     */
    schedule?: Schedule;
}
/**
 * 
 * @export
 * @interface TimeRange
 */
export interface TimeRange {
    /**
     * 
     * @type {Date}
     * @memberof TimeRange
     */
    start?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TimeRange
     */
    end?: Date;
}
/**
 * 
 * @export
 * @interface TrackBody
 */
export interface TrackBody {
    /**
     * 
     * @type {Context & any}
     * @memberof TrackBody
     */
    context: Context & any;
    /**
     * 
     * @type {TrackMessage}
     * @memberof TrackBody
     */
    message: TrackMessage;
}
/**
 * 
 * @export
 * @interface TrackMessage
 */
export interface TrackMessage {
    /**
     * 
     * @type {Orderpropertiesid}
     * @memberof TrackMessage
     */
    orderId: string;
    /**
     * 
     * @type {string}
     * @memberof TrackMessage
     */
    callbackUrl?: string;
}
/**
 * Contains tracking information that can be used by the BAP to track the fulfillment of an order in real-time. which is useful for knowing the location of time sensitive deliveries.
 * @export
 * @interface Tracking
 */
export interface Tracking {
    /**
     * A unique tracking reference number
     * @type {string}
     * @memberof Tracking
     */
    id?: string;
    /**
     * A URL to the tracking endpoint. This can be a link to a tracking webpage, a webhook URL created by the BAP where BPP can push the tracking data, or a GET url creaed by the BPP which the BAP can poll to get the tracking data. It can also be a websocket URL where the BPP can push real-time tracking data.
     * @type {string}
     * @memberof Tracking
     */
    url?: string;
    /**
     * In case there is no real-time tracking endpoint available, this field will contain the latest location of the entity being tracked. The BPP will update this value everytime the BAP calls the track API.
     * @type {Location}
     * @memberof Tracking
     */
    location?: Location;
    /**
     * This value indicates if the tracking is currently active or not. If this value is `active`, then the BAP can begin tracking the order. If this value is `inactive`, the tracking URL is considered to be expired and the BAP should stop tracking the order.
     * @type {string}
     * @memberof Tracking
     */
    status?: Tracking.StatusEnum;
}

/**
 * @export
 * @namespace Tracking
 */
export namespace Tracking {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Inactive = <any> 'inactive'
    }
}
/**
 * 
 * @export
 * @interface UpdateBody
 */
export interface UpdateBody {
    /**
     * 
     * @type {Context & any}
     * @memberof UpdateBody
     */
    context: Context & any;
    /**
     * 
     * @type {UpdateMessage}
     * @memberof UpdateBody
     */
    message: UpdateMessage;
}
/**
 * 
 * @export
 * @interface UpdateMessage
 */
export interface UpdateMessage {
    /**
     * Comma separated values of order objects being updated. For example: ```\"update_target\":\"item,billing,fulfillment\"```
     * @type {string}
     * @memberof UpdateMessage
     */
    updateTarget: string;
    /**
     * Updated order object
     * @type {Order}
     * @memberof UpdateMessage
     */
    order: Order;
}
/**
 * Describes a vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.<br>This has properties like category, capacity, make, model, size,variant,color,energy_type,registration
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    make?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    variant?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    energyType?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    registration?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    wheelsCount?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    cargoVolumne?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    wheelchairAccess?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    emissionStandard?: string;
}
/**
 * Contains any additional or extended inputs required to confirm an order. This is typically a Form Input. Sometimes, selection of catalog elements is not enough for the BPP to confirm an order. For example, to confirm a flight ticket, the airline requires details of the passengers along with information on baggage, identity, in addition to the class of ticket. Similarly, a logistics company may require details on the nature of shipment in order to confirm the shipping. A recruiting firm may require additional details on the applicant in order to confirm a job application. For all such purposes, the BPP can choose to send this object attached to any object in the catalog that is required to be sent while placing the order. This object can typically be sent at an item level or at the order level. The item level XInput will override the Order level XInput as it indicates a special requirement of information for that particular item. Hence the BAP must render a separate form for the Item and another form at the Order level before confirmation.
 * @export
 * @interface XInput
 */
export interface XInput extends Form {
}
/**
 * The response to the form fetched via the XInput URL
 * @export
 */
export type XInputResponse = Array<XInputResponseInner>
/**
 * 
 * @export
 * @interface XInputResponseInner
 */
export interface XInputResponseInner {
    /**
     * The _name_ attribute of the input tag in the XInput form
     * @type {string}
     * @memberof XInputResponseInner
     */
    input?: string;
    /**
     * The value of the input field. Files must be sent as data URLs. For more information on Data URLs visit https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs
     * @type {string}
     * @memberof XInputResponseInner
     */
    value?: string;
}
/**
 * BecknApplicationPlatformBAPApi - fetch parameter creator
 * @export
 */
// export const BecknApplicationPlatformBAPApiFetchParamCreator = function (configuration?: Configuration) {
//     return {
//         /**
//          * Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object
//          * @param {OnCancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onCancelPost(body?: OnCancelBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_cancel`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnCancelBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Send active order object
//          * @param {OnConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onConfirmPost(body?: OnConfirmBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_confirm`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnConfirmBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Send order object with payment details updated
//          * @param {OnInitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onInitPost(body?: OnInitBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_init`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnInitBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Provide feedback on a service
//          * @param {OnRatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onRatingPost(body?: OnRatingBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_rating`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnRatingBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_search`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnSearchBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Send draft order object with quoted price for selected items
//          * @param {OnSelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSelectPost(body?: OnSelectBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_select`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnSelectBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Fetch the status of a Service
//          * @param {OnStatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onStatusPost(body?: OnStatusBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_status`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnStatusBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Contact Support
//          * @param {OnSupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSupportPost(body?: OnSupportBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_support`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnSupportBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Send tracking details of an active order
//          * @param {OnTrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onTrackPost(body?: OnTrackBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_track`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnTrackBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Returns updated service with updated runtime object
//          * @param {OnUpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onUpdatePost(body?: OnUpdateBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_update`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnUpdateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//     }
// };

/**
 * BecknApplicationPlatformBAPApi - functional programming interface
 * @export
 */
// export const BecknApplicationPlatformBAPApiFp = function(configuration?: Configuration) {
//     return {
//         /**
//          * Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object
//          * @param {OnCancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onCancelPost(body?: OnCancelBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onCancelPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Send active order object
//          * @param {OnConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onConfirmPost(body?: OnConfirmBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onConfirmPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Send order object with payment details updated
//          * @param {OnInitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onInitPost(body?: OnInitBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onInitPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Provide feedback on a service
//          * @param {OnRatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onRatingPost(body?: OnRatingBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onRatingPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onSearchPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Send draft order object with quoted price for selected items
//          * @param {OnSelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSelectPost(body?: OnSelectBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onSelectPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Fetch the status of a Service
//          * @param {OnStatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onStatusPost(body?: OnStatusBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onStatusPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Contact Support
//          * @param {OnSupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSupportPost(body?: OnSupportBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onSupportPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Send tracking details of an active order
//          * @param {OnTrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onTrackPost(body?: OnTrackBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onTrackPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Returns updated service with updated runtime object
//          * @param {OnUpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onUpdatePost(body?: OnUpdateBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknApplicationPlatformBAPApiFetchParamCreator(configuration).onUpdatePost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//     }
// };

/**
 * BecknApplicationPlatformBAPApi - factory interface
 * @export
 */
// export const BecknApplicationPlatformBAPApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
//     return {
//         /**
//          * Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object
//          * @param {OnCancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onCancelPost(body?: OnCancelBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onCancelPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Send active order object
//          * @param {OnConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onConfirmPost(body?: OnConfirmBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onConfirmPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Send order object with payment details updated
//          * @param {OnInitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onInitPost(body?: OnInitBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onInitPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Provide feedback on a service
//          * @param {OnRatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onRatingPost(body?: OnRatingBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onRatingPost(body, options)(fetch, basePath);
//         },
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onSearchPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Send draft order object with quoted price for selected items
//          * @param {OnSelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSelectPost(body?: OnSelectBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onSelectPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Fetch the status of a Service
//          * @param {OnStatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onStatusPost(body?: OnStatusBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onStatusPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Contact Support
//          * @param {OnSupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSupportPost(body?: OnSupportBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onSupportPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Send tracking details of an active order
//          * @param {OnTrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onTrackPost(body?: OnTrackBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onTrackPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Returns updated service with updated runtime object
//          * @param {OnUpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onUpdatePost(body?: OnUpdateBody, options?: any) {
//             return BecknApplicationPlatformBAPApiFp(configuration).onUpdatePost(body, options)(fetch, basePath);
//         },
//     };
// };

/**
 * BecknApplicationPlatformBAPApi - object-oriented interface
 * @export
 * @class BecknApplicationPlatformBAPApi
 * @extends {BaseAPI}
 */
// export class BecknApplicationPlatformBAPApi extends BaseAPI {
//     /**
//      * Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object
//      * @param {OnCancelBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onCancelPost(body?: OnCancelBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onCancelPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Send active order object
//      * @param {OnConfirmBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onConfirmPost(body?: OnConfirmBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onConfirmPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Send order object with payment details updated
//      * @param {OnInitBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onInitPost(body?: OnInitBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onInitPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Provide feedback on a service
//      * @param {OnRatingBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onRatingPost(body?: OnRatingBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onRatingPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * BPP sends its catalog in response to a search request.
//      * @param {OnSearchBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onSearchPost(body?: OnSearchBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onSearchPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Send draft order object with quoted price for selected items
//      * @param {OnSelectBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onSelectPost(body?: OnSelectBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onSelectPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Fetch the status of a Service
//      * @param {OnStatusBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onStatusPost(body?: OnStatusBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onStatusPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Contact Support
//      * @param {OnSupportBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onSupportPost(body?: OnSupportBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onSupportPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Send tracking details of an active order
//      * @param {OnTrackBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onTrackPost(body?: OnTrackBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onTrackPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Returns updated service with updated runtime object
//      * @param {OnUpdateBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknApplicationPlatformBAPApi
//      */
//     public onUpdatePost(body?: OnUpdateBody, options?: any) {
//         return BecknApplicationPlatformBAPApiFp(this.configuration).onUpdatePost(body, options)(this.fetch, this.basePath);
//     }

// }
/**
 * BecknGatewayBGApi - fetch parameter creator
 * @export
 */
// export const BecknGatewayBGApiFetchParamCreator = function (configuration?: Configuration) {
//     return {
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options: any = {}): FetchArgs {
//             const localVarPath = `/on_search`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"OnSearchBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options: any = {}): FetchArgs {
//             const localVarPath = `/search`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"SearchBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//     }
// };

/**
 * BecknGatewayBGApi - functional programming interface
 * @export
 */
// export const BecknGatewayBGApiFp = function(configuration?: Configuration) {
//     return {
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknGatewayBGApiFetchParamCreator(configuration).onSearchPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknGatewayBGApiFetchParamCreator(configuration).searchPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//     }
// };

/**
 * BecknGatewayBGApi - factory interface
 * @export
 */
// export const BecknGatewayBGApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
//     return {
//         /**
//          * BPP sends its catalog in response to a search request.
//          * @param {OnSearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         onSearchPost(body?: OnSearchBody, options?: any) {
//             return BecknGatewayBGApiFp(configuration).onSearchPost(body, options)(fetch, basePath);
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options?: any) {
//             return BecknGatewayBGApiFp(configuration).searchPost(body, options)(fetch, basePath);
//         },
//     };
// };

/**
 * BecknGatewayBGApi - object-oriented interface
 * @export
 * @class BecknGatewayBGApi
 * @extends {BaseAPI}
 */
// export class BecknGatewayBGApi extends BaseAPI {
//     /**
//      * BPP sends its catalog in response to a search request.
//      * @param {OnSearchBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknGatewayBGApi
//      */
//     public onSearchPost(body?: OnSearchBody, options?: any) {
//         return BecknGatewayBGApiFp(this.configuration).onSearchPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * BAP declares the customer's intent to buy/avail products or services
//      * @param {SearchBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknGatewayBGApi
//      */
//     public searchPost(body?: SearchBody, options?: any) {
//         return BecknGatewayBGApiFp(this.configuration).searchPost(body, options)(this.fetch, this.basePath);
//     }

// }
/**
 * BecknProviderPlatformBPPApi - fetch parameter creator
 * @export
 */
// export const BecknProviderPlatformBPPApiFetchParamCreator = function (configuration?: Configuration) {
//     return {
//         /**
//          * Cancel an order
//          * @param {CancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancelPost(body?: CancelBody, options: any = {}): FetchArgs {
//             const localVarPath = `/cancel`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"CancelBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {ConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         confirmPost(body?: ConfirmBody, options: any = {}): FetchArgs {
//             const localVarPath = `/confirm`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"ConfirmBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {InitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         initPost(body?: InitBody, options: any = {}): FetchArgs {
//             const localVarPath = `/init`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"InitBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Provide feedback on a service
//          * @param {RatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         ratingPost(body?: RatingBody, options: any = {}): FetchArgs {
//             const localVarPath = `/rating`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"RatingBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options: any = {}): FetchArgs {
//             const localVarPath = `/search`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"SearchBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * BAP declares the customer's cart (or equivalent) created by selecting objects from the catalog
//          * @param {SelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         selectPost(body?: SelectBody, options: any = {}): FetchArgs {
//             const localVarPath = `/select`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"SelectBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Fetch the latest order object
//          * @param {StatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         statusPost(body?: StatusBody, options: any = {}): FetchArgs {
//             const localVarPath = `/status`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"StatusBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Contact support
//          * @param {SupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         supportPost(body?: SupportBody, options: any = {}): FetchArgs {
//             const localVarPath = `/support`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"SupportBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Track an active order
//          * @param {TrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         trackPost(body?: TrackBody, options: any = {}): FetchArgs {
//             const localVarPath = `/track`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"TrackBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//         /**
//          * Remove object
//          * @param {UpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         updatePost(body?: UpdateBody, options: any = {}): FetchArgs {
//             const localVarPath = `/update`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication SubscriberAuth required
//             if (configuration && configuration.apiKey) {
//                 const localVarApiKeyValue = typeof configuration.apiKey === 'function'
// 					? configuration.apiKey("Authorization")
// 					: configuration.apiKey;
//                 localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
//             }

//             localVarHeaderParameter['Content-Type'] = 'application/json';

//             localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
//             const needsSerialization = (<any>"UpdateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
//             localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions,
//             };
//         },
//     }
// };

/**
 * BecknProviderPlatformBPPApi - functional programming interface
 * @export
 */
// export const BecknProviderPlatformBPPApiFp = function(configuration?: Configuration) {
//     return {
//         /**
//          * Cancel an order
//          * @param {CancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancelPost(body?: CancelBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).cancelPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {ConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         confirmPost(body?: ConfirmBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).confirmPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {InitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         initPost(body?: InitBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponseDefault> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).initPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Provide feedback on a service
//          * @param {RatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         ratingPost(body?: RatingBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).ratingPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).searchPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * BAP declares the customer's cart (or equivalent) created by selecting objects from the catalog
//          * @param {SelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         selectPost(body?: SelectBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).selectPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Fetch the latest order object
//          * @param {StatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         statusPost(body?: StatusBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).statusPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Contact support
//          * @param {SupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         supportPost(body?: SupportBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).supportPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Track an active order
//          * @param {TrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         trackPost(body?: TrackBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).trackPost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          * Remove object
//          * @param {UpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         updatePost(body?: UpdateBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = BecknProviderPlatformBPPApiFetchParamCreator(configuration).updatePost(body, options);
//             return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
//                 return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//     }
// };

/**
 * BecknProviderPlatformBPPApi - factory interface
 * @export
 */
// export const BecknProviderPlatformBPPApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
//     return {
//         /**
//          * Cancel an order
//          * @param {CancelBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancelPost(body?: CancelBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).cancelPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {ConfirmBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         confirmPost(body?: ConfirmBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).confirmPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Initialize an order by providing billing and/or shipping details
//          * @param {InitBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         initPost(body?: InitBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).initPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Provide feedback on a service
//          * @param {RatingBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         ratingPost(body?: RatingBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).ratingPost(body, options)(fetch, basePath);
//         },
//         /**
//          * BAP declares the customer's intent to buy/avail products or services
//          * @param {SearchBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         searchPost(body?: SearchBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).searchPost(body, options)(fetch, basePath);
//         },
//         /**
//          * BAP declares the customer's cart (or equivalent) created by selecting objects from the catalog
//          * @param {SelectBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         selectPost(body?: SelectBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).selectPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Fetch the latest order object
//          * @param {StatusBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         statusPost(body?: StatusBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).statusPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Contact support
//          * @param {SupportBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         supportPost(body?: SupportBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).supportPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Track an active order
//          * @param {TrackBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         trackPost(body?: TrackBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).trackPost(body, options)(fetch, basePath);
//         },
//         /**
//          * Remove object
//          * @param {UpdateBody} [body] 
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         updatePost(body?: UpdateBody, options?: any) {
//             return BecknProviderPlatformBPPApiFp(configuration).updatePost(body, options)(fetch, basePath);
//         },
//     };
// };

/**
 * BecknProviderPlatformBPPApi - object-oriented interface
 * @export
 * @class BecknProviderPlatformBPPApi
 * @extends {BaseAPI}
 */
// export class BecknProviderPlatformBPPApi extends BaseAPI {
//     /**
//      * Cancel an order
//      * @param {CancelBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public cancelPost(body?: CancelBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).cancelPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Initialize an order by providing billing and/or shipping details
//      * @param {ConfirmBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public confirmPost(body?: ConfirmBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).confirmPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Initialize an order by providing billing and/or shipping details
//      * @param {InitBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public initPost(body?: InitBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).initPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Provide feedback on a service
//      * @param {RatingBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public ratingPost(body?: RatingBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).ratingPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * BAP declares the customer's intent to buy/avail products or services
//      * @param {SearchBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public searchPost(body?: SearchBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).searchPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * BAP declares the customer's cart (or equivalent) created by selecting objects from the catalog
//      * @param {SelectBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public selectPost(body?: SelectBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).selectPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Fetch the latest order object
//      * @param {StatusBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public statusPost(body?: StatusBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).statusPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Contact support
//      * @param {SupportBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public supportPost(body?: SupportBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).supportPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Track an active order
//      * @param {TrackBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public trackPost(body?: TrackBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).trackPost(body, options)(this.fetch, this.basePath);
//     }

//     /**
//      * Remove object
//      * @param {UpdateBody} [body] 
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof BecknProviderPlatformBPPApi
//      */
//     public updatePost(body?: UpdateBody, options?: any) {
//         return BecknProviderPlatformBPPApiFp(this.configuration).updatePost(body, options)(this.fetch, this.basePath);
//     }

// }
